{
  "random_seed": std.parseInt(std.extVar("SEED")),
  "pytorch_seed": std.parseInt(std.extVar("PYTORCH_SEED")),
  "numpy_seed": std.parseInt(std.extVar("NUMPY_SEED")),
  "dataset_reader": {
    "type": "ebmnlp",
    "token_indexers": {
      // TODO: lowercase
      "elmo": {
        "type": "elmo_characters",
        "namespace": "euclidean"
      }
    }
  },
  "vocabulary": {
    "type": "from_files",
    "directory": std.extVar("EXPERIMENT_DIR") + "/vocabulary"
  },
  "train_data_path": std.extVar("TRAIN_PATH"),
  "validation_data_path": std.extVar("DEV_PATH"),
  "test_data_path": std.extVar("TEST_PATH"),
  "evaluate_on_test": true,
  "model": {
    "type": "pico_crf_tagger",
    "dropout": 0.5,
    "include_start_end_transitions": false,
    "text_field_embedder": {
        // "allow_unmatched_keys": true,
        "token_embedders": {
          "elmo": {
            "type": "bidirectional_lm_token_embedder",
            "archive_file": std.extVar("ELMO_WEIGHTS")
          }
        }
    },
    "encoder": {
        "type": "lstm",
        "input_size": 1024,
        "hidden_size": 200,
        "num_layers": 2,
        "dropout": 0.5,
        "bidirectional": true
    }
  },
  "data_loader": {
    "max_instances_in_memory": std.parseInt(std.extVar("GRAD_ACCUM_BATCH_SIZE")) / 2 * 100,
    "batch_sampler": {
      "type": "bucket",
      "batch_size": std.parseInt(std.extVar("GRAD_ACCUM_BATCH_SIZE")) / 2,
    }
  },
  "trainer": {
    "optimizer": {
        "type": "adam",
        "lr": 0.001 
    },
    "validation_metric": "+avg_f1",
    // "num_serialized_models_to_keep": 3,
    "num_epochs": std.parseInt(std.extVar("NUM_EPOCHS")),
    // "should_log_learning_rate": true,
//    "learning_rate_scheduler": {
//      "type": "slanted_triangular",
//      "num_epochs": std.parseInt(std.extVar("NUM_EPOCHS")),
//      "num_steps_per_epoch": std.parseInt(std.extVar("DATASET_SIZE")) / std.parseInt(std.extVar("GRAD_ACCUM_BATCH_SIZE"))
//    },
    // "gradient_accumulation_batch_size": std.parseInt(std.extVar("GRAD_ACCUM_BATCH_SIZE")),
    "patience": 10,
    "cuda_device": std.parseInt(std.extVar("CUDA_DEVICE"))
  }
}
